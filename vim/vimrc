" Needed on some linux distros.
" see http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html
filetype off 
call pathogen#infect()
call pathogen#helptags()

:let mapleader = "-"
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

syntax on
filetype plugin indent on

let &t_Co=256		        " setting terminal to 256

if has('gui_running')
    set background=light
    colorscheme solarized
else
    set background=light
    colorscheme solarized "codeschool
endif

" set format git messages
autocmd Filetype gitcommit setlocal spell textwidth=72

set nocompatible
set autoread
set autoindent

set numberwidth=4
if version >= 74
  set relativenumber 
endif
set number   		        " set line numbers
set ruler               	" show the cursor position all the time
set hidden 		          	" edit several file

set hlsearch            	" Searching highlightning
set incsearch

set softtabstop=2
set wildmode=list:longest
set laststatus=2
set history=100         	" keep 50 lines of command line history
set showcmd            	" display incomplete commands
set incsearch           	" do incremental searching
set expandtab
set shiftwidth=2
set tabstop=2
set helpheight=1000
set list
set listchars=tab:â–¸\ ,eol:Â¬

set expandtab
highlight ColorColumn ctermbg=red "highlight 81 column
" set colorcolumn=81

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

set guifont=Source\ Code\ Pro\ for\ Powerline:h16
let g:Powerline_symbols = 'fancy' "set fancy font for Powerline
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\

let g:rails_menu=2
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

set backspace=indent,eol,start

runtime macros/matchit.vim " activate matchit plugin

" Better surround
let g:surround_40 = "(\r)"
let g:surround_91 = "[\r]"
let g:surround_60 = "<\r>"

let g:acp_ignorecaseOption = 0

let g:SuperTabLongestEnhanced = 1
let g:SuperTabLongestHighlight = 1
let g:SuperTabCrClosePreview = 1

" Setup RSpec
let g:rspec_runner = "os_x_iterm"
let g:rspec_command = "Dispatch rspec {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

set hlsearch
hi IncSearch term=reverse gui=underline guibg=Blue  guifg=Yellow
hi    Search term=reverse gui=underline guibg=Black guifg=Yellow
hi    Visual term=reverse cterm=reverse ctermbg=9 guibg=#555577 guifg=Black


hi Pmenu      guifg=White guibg=Blue
hi PmenuSel   gui=italic guifg=Yellow guibg=Blue
hi PmenuSbar  ctermbg=Black guibg=Grey
hi PmenuThumb guifg=Yellow guibg=Black

if has("gui_running")
  set lines=80 
  set columns=180 
  set number
endif

set completeopt=longest,menu,preview
set wildmode=longest,list:longest
set complete=.,t

setlocal numberwidth=3

map gb <C-^>
vmap gl :<C-U>!blame <C-R>=expand("%:p") <CR> <C-R>=line("'<") <CR> <C-R>=line("'>") <CR> <CR>
vmap # :TComment<CR>
map - :Tabularize hash
map <C-l> :nohl
map <leader>a :Tabularize /=>\?<cr>
" Nice statusbar
set laststatus=2
set statusline+=%2*%-3.3n%0*\                " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%1*%m%r%w%0*               " flags
set statusline+=%=                           " right align
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

autocmd BufNewFile,BufRead *.css set fdm=marker fmr={,}



"{{{ Ruby block delimiter conversion: do end <=> { }
"Copyright Â© 2005 Mauricio Fernandez
"Subject to same licensing terms as Ruby.
" requires matchit and friends 
" since it uses the % and = bindings
function! s:String_Strip(str)
  let s = substitute(a:str, '\v^\s*', '', '')
  return substitute(s, '\v\s*$', '', '')
endfunction

function! s:RubyBlockBraceToDoEnd(lineno)
  " { } => do end
  let oldz = getreg("z")
  call setreg("z", "")
  execute 'normal ^f{%l"zd$'
  let suffix = s:String_Strip(getreg("z"))
  call setreg("z", oldz)
  let orig = getline(".")
  let repl = substitute(orig, '\v\s*\{\s*(\|[^|]*\|)?.*', ' do \1', '')
  call setline(".", repl)
  let nextline = substitute(orig, '\v[^{]*\v\s*\{\s*(\|[^|]*\|)?', '', '')
  let nextline = substitute(nextline, '\}[^}]*$', '', '')
  let numlines = 0


  " uncomment one of the following:

  " (1) just insert the body without splitting the lines on ;
  "call append(a:lineno, nextline)
  "call append(a:lineno+1, 'end' . suffix)
  "

  " (2) try to split on ; ...
  call append(a:lineno, 'end' . suffix)
  " this is what we would want to do: 
  "let nextline = substitute(nextline, ';', "\n", 'g')

  while stridx(nextline, ";") != -1
    let eom = stridx(nextline, ";")
    let line = s:String_Strip(strpart(nextline, 0, eom))
    call append(a:lineno + numlines, line) 
    let numlines = numlines + 1
    let nextline = strpart(nextline, eom+1, strlen(nextline) - eom - 1)
  endwhile
  let nextline = s:String_Strip(nextline)
  if strlen(nextline) > 0
    call append(a:lineno + numlines, nextline)
    let numlines = numlines + 1
  endif

  " this is what it all began with...
  "execute 'normal :s/\v\s*\{\s*(\|.*\|)?/ do \1\r/
'
  "execute 'normal g_cw
end'
  execute 'normal V' . (1 + numlines) . 'j='
  "echo "{ } => do end"
endfunction

function! s:RubyBlockDoEndToBrace(_firstline, _lastline)
  " do end => { }
  let linenum = a:_firstline + 1
  let orig = getline(".")
  while linenum < a:_lastline - 1
    let addline = getline(linenum)
    if '\v^\s*$' !~ addline
      let addline = substitute(addline, '\v^\s*', '', '')
      let addline = substitute(addline, '\s*$', '; ', '')
      let orig = orig . addline
    endif
    let linenum = linenum + 1
  endwhile
  let l = substitute(getline(a:_lastline-1), '\v^\s*', '', '')
  let l = substitute(l, '\s*$', '', '')
  let orig = orig . l
  let l = substitute(getline(a:_lastline), '\v^\s*end(\.|\s|$)@=', ' }', '')
  let l = substitute(l, '\s*$', '', '')
  let orig = orig . l

  "echo orig
  "input(orig)
  let repl = substitute(orig, '\v\s*do\s*(\|[^|]*\|)?', ' {\1 ', '')
  "execute 'normal d' . (a:_lastline - a:_firstline) . 'j'
  execute ':' . a:_firstline . ',' . a:_lastline . 'd'
  call append(a:_firstline - 1, repl)
  execute ':' . a:_firstline
  "echo "do end => { }"
endfunction

map <SID>xx <SID>xx
let s:sid = maparg("<SID>xx")
unmap <SID>xx
let s:sid = substitute(s:sid, 'xx', '', '')

function! <SID>RubyBlockSwitchDelimiters() range
  set nofoldenable
  if a:firstline == a:lastline
    let braceidx = match(getline("."), '{')
    let doidx = match(getline("."), '\<do\>')
    if braceidx != -1 && (doidx == -1 || braceidx < doidx)
      call s:RubyBlockBraceToDoEnd(a:firstline)
    elseif doidx != -1
      execute 'normal /\<do\>' . "\n" . 'V%:call ' . 
            \ s:sid . 'RubyBlockSwitchDelimiters()' . "\n"
    else
      echo "No block found"
    end
  else
    call s:RubyBlockDoEndToBrace(a:firstline, a:lastline)
  endif
  "execute 'normal V2k='
  "execute 'normal v5j'
endfunction

command! -range B <line1>,<line2>call <SID>RubyBlockSwitchDelimiters()
vmap <Leader>B :call <SID>RubyBlockSwitchDelimiters()<cr>
xmap s <Plug>VSurround


" Temp file settings
set backupdir=~/tmp
set directory=~/tmp
